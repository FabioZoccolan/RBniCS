stages:
  - build
  - test
  - release

variables:
  TESTING_IMAGE: $CI_REGISTRY_IMAGE:testing-$CI_COMMIT_SHA
  RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

build:
  image: docker:latest
  services:
    - docker:dind
  stage: build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --pull -t $TESTING_IMAGE -f docker/Dockerfile .
    - docker push $TESTING_IMAGE

flake8:
  image:
    name: $TESTING_IMAGE
    entrypoint: ["/sbin/my_init","--quiet","--","/sbin/setuser","fenics"]
  stage: test
  before_script:
    - source $FENICS_HOME/fenics.env.conf
    - export DIJITSO_CACHE_DIR=$CI_PROJECT_DIR/.dijitso
    - python3 -c "import dolfin; import rbnics"
  script:
    - pytest --flake8 -m flake8 -vv rbnics --html=pytest_flake8_core.html --self-contained-html
    - pytest --flake8 -m flake8 -vv tests --html=pytest_flake8_tests.html --self-contained-html
    - pytest --flake8 -m flake8 -vv tutorials --html=pytest_flake8_tests.html --self-contained-html
  artifacts:
    paths:
      - pytest_flake8_*.html
    when: on_failure

tests_performance_serial:
  image:
    name: $TESTING_IMAGE
    entrypoint: ["/sbin/my_init","--quiet","--","/sbin/setuser","fenics"]
  stage: test
  before_script:
    - source $FENICS_HOME/fenics.env.conf
    - export DIJITSO_CACHE_DIR=$CI_PROJECT_DIR/.dijitso
    - python3 -c "import dolfin; import rbnics"
  script:
    - pytest --benchmark-disable -n auto -vv --html=pytest_tests_performance_serial.html --self-contained-html tests/performance
  artifacts:
    paths:
      - pytest_tests_performance_serial.html
    when: on_failure

tests_unit_serial:
  image:
    name: $TESTING_IMAGE
    entrypoint: ["/sbin/my_init","--quiet","--","/sbin/setuser","fenics"]
  stage: test
  before_script:
    - source $FENICS_HOME/fenics.env.conf
    - export DIJITSO_CACHE_DIR=$CI_PROJECT_DIR/.dijitso
    - python3 -c "import dolfin; import rbnics"
  script:
    - pytest -n auto -vv -k "not time_stepping and not pull_back_to_reference_domain" --html=pytest_tests_unit_serial.html --self-contained-html tests/unit
  artifacts:
    paths:
      - pytest_tests_unit_serial.html
    when: on_failure

tests_separated_parametrized_form:
  image:
    name: $TESTING_IMAGE
    entrypoint: ["/sbin/my_init","--quiet","--","/sbin/setuser","fenics"]
  stage: test
  before_script:
    - source $FENICS_HOME/fenics.env.conf
    - export DIJITSO_CACHE_DIR=$CI_PROJECT_DIR/.dijitso
    - python3 -c "import dolfin; import rbnics"
  script:
    - pytest -vv --html=pytest_test_separated_parametrized_form_scalar.html --self-contained-html tests/unit/test_separated_parametrized_form_scalar.py
    - pytest -vv --html=pytest_test_separated_parametrized_form_vector.html --self-contained-html tests/unit/test_separated_parametrized_form_vector.py
    - pytest -vv --html=pytest_test_separated_parametrized_form_mixed.html --self-contained-html tests/unit/test_separated_parametrized_form_mixed.py
  artifacts:
    paths:
      - pytest_test_separated_parametrized_form_*.html
    when: on_failure

tests_reduced_mesh:
  image:
    name: $TESTING_IMAGE
    entrypoint: ["/sbin/my_init","--quiet","--","/sbin/setuser","fenics"]
  stage: test
  before_script:
    - source $FENICS_HOME/fenics.env.conf
    - export DIJITSO_CACHE_DIR=$CI_PROJECT_DIR/.dijitso
    - python3 -c "import dolfin; import rbnics"
  script:
    - pytest -vv --html=pytest_test_reduced_mesh_save_serial.html --self-contained-html -k test_reduced_mesh_save tests/unit/test_reduced_mesh.py
    - pytest -vv --html=pytest_test_reduced_mesh_load_serial_from_serial.html --self-contained-html -k test_reduced_mesh_load tests/unit/test_reduced_mesh.py
    - mpirun -n 2 pytest -vv --gc-disable --gc-scope function --html=pytest_test_reduced_mesh_load_parallel_from_serial.html --self-contained-html -k test_reduced_mesh_load tests/unit/test_reduced_mesh.py
    - mpirun -n 2 pytest -vv --gc-disable --gc-scope function --html=pytest_test_reduced_mesh_save_parallel.html --self-contained-html -k test_reduced_mesh_save tests/unit/test_reduced_mesh.py
    - mpirun -n 2 pytest -vv --gc-disable --gc-scope function --html=pytest_test_reduced_mesh_load_parallel_from_parallel.html --self-contained-html -k test_reduced_mesh_load tests/unit/test_reduced_mesh.py
    - pytest -vv --html=pytest_test_reduced_mesh_load_serial_from_parallel.html --self-contained-html -k test_reduced_mesh_load tests/unit/test_reduced_mesh.py
  artifacts:
    paths:
      - pytest_test_reduced_mesh_*.html
    when: on_failure

tests_tensor_io:
  image:
    name: $TESTING_IMAGE
    entrypoint: ["/sbin/my_init","--quiet","--","/sbin/setuser","fenics"]
  stage: test
  before_script:
    - source $FENICS_HOME/fenics.env.conf
    - export DIJITSO_CACHE_DIR=$CI_PROJECT_DIR/.dijitso
    - python3 -c "import dolfin; import rbnics"
  script:
    - pytest -vv --html=pytest_test_tensor_save_serial.html --self-contained-html -k test_tensor_save tests/unit/test_tensor_io.py
    - pytest -vv --html=pytest_test_tensor_load_serial_from_serial.html --self-contained-html -k test_tensor_load tests/unit/test_tensor_io.py
    - mpirun -n 2 pytest -vv --gc-disable --gc-scope function --html=pytest_test_tensor_load_parallel_from_serial.html --self-contained-html -k test_tensor_load tests/unit/test_tensor_io.py
    - mpirun -n 2 pytest -vv --gc-disable --gc-scope function --html=pytest_test_tensor_save_parallel.html --self-contained-html -k test_tensor_save tests/unit/test_tensor_io.py
    - mpirun -n 2 pytest -vv --gc-disable --gc-scope function --html=pytest_test_tensor_load_parallel_from_parallel.html --self-contained-html -k test_tensor_load tests/unit/test_tensor_io.py
    - pytest -vv --html=pytest_test_tensor_load_serial_from_parallel.html --self-contained-html -k test_tensor_load tests/unit/test_tensor_io.py
  artifacts:
    paths:
      - pytest_test_tensor_*.html
    when: on_failure

release:
  image: docker:latest
  services:
    - docker:dind
  stage: release
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $TESTING_IMAGE
    - docker tag $TESTING_IMAGE $RELEASE_IMAGE
    - docker push $RELEASE_IMAGE
  only:
    - master
